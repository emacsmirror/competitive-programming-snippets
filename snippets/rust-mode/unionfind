# name : Union Find
# contributor : Seong Yong-ju <sei40kr@gmail.com>
# key: unionfind
# --

struct UnionFind {
    size: usize,
    parents: Vec<usize>,
    ranks: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> UnionFind {
        UnionFind {
            size: n,
            parents: (0..n).collect::<Vec<usize>>(),
            ranks: vec![1; n],
        }
    }

    fn same(&mut self, x: usize, y: usize) -> bool {
        self.root(x) == self.root(y)
    }

    fn root(&mut self, x: usize) -> usize {
        if x == self.parents[x] {
            x
        } else {
            let parent = self.parents[x];
            self.parents[x] = self.root(parent);
            self.parents[x]
        }
    }

    fn unite(&mut self, mut x: usize, mut y: usize) {
        x = self.root(x);
        y = self.root(y);
        if x == y {
            return false;
        }

        self.size -= 1;
        if self.ranks[x] < self.ranks[y] {
            self.parents[x] = y;
            self.ranks[y] += self.ranks[x];
            self.ranks[x] = 0;
        } else {
            self.parents[y] = x;
            self.ranks[x] += self.ranks[y];
            self.ranks[y] = 0;
        }
    }
}
