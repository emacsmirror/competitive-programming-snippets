# -*- mode: snippet -*-
# contributor: Translated to yasnippet by sublime-snippet import
# key: combinationprime
# name: nCr mod prime
# --

const int MAX = 1e5 + 5;
const int MOD = 1e9 + 7;		//a prime number

int add(int a, int b, int c){int res=a+b;return(res>=c?res-c:res);}
int mod_neg(int a, int b, int c){int res;if(abs(a-b)<c)res=a-b;else res=(a-b)%c;return(res<0?res+c:res);}
int mul(int a, int b, int c){long long res=(long long)a*b;return(res>=c?res%c:res);}
template<typename T>T power(T e, T n, T m){T x=1,p=e;while(n){if(n&1)x=mul(x,p,m);p=mul(p,p,m);n>>=1;}return x;}
template<typename T>T extended_euclid(T a, T b, T &x, T &y){T xx=0,yy=1;y=0;x=1;while(b){T q=a/b,t=b;b=a%b;a=t;\
t=xx;xx=x-q*xx;x=t;t=yy;yy=y-q*yy;y=t;}return a;}
template<typename T>T mod_inverse(T a, T n){T x,y,z=0;T d=extended_euclid(a,n,x,y);return(d>1?-1:mod_neg(x,z,n));}

int fact[MAX], invp[MAX];

//Complexity : O(nlog n)
void init() {
	fact[0] = invp[0] = 1;
	for(int i = 1; i < MAX; ++i) {
		fact[i] = mul(fact[i-1], i, MOD);
		invp[i] = mod_inverse(fact[i], MOD);
	}
}

//Complexity : O(1)
int ncr(int n, int r) {
	if (r < 0 || r > n) return 0;
	return mul(fact[n], mul(invp[n-r], invp[r], MOD), MOD);
}
