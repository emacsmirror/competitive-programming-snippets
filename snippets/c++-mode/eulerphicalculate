# -*- mode: snippet -*-
# contributor: Translated to yasnippet by sublime-snippet import
# key: eulerphicalculate
# name: Euler Totient Function Calculation
# --

vector<int> lp, primes;

void factor_sieve() {
	lp.resize(MAX);
	lp[1] = 1;
	for (int i = 2; i < MAX; ++i) {
		if (lp[i] == 0) {
			lp[i] = i;
			primes.emplace_back(i);
		}
		for (int j = 0; j < primes.size() && primes[j] <= lp[i]; ++j) {
			int x = i * primes[j];
			if (x >= MAX) break;
			lp[x] = primes[j];
		}
	}
}

int phi(int n) {
	if (n == 1) return 1;
	int etf = n, val;
	while (n != 1) {
		val = lp[n];
		etf -= etf/val;
		while (n % val==0) n /= val;
	}
	return etf;
}
